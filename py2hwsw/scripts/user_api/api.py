# SPDX-FileCopyrightText: 2025 IObundle
#
# SPDX-License-Identifier: MIT

# User API for interfacing with Py2HWSW
#
# Py2HWSW has 3 user interfaces in total:
# - Dictionary/JSON interface
# - Short notation interface
# - API interface
#
# The classes specify the API interface. User may instantiate/use any of the classes,
# their attributes, and methods.
#
# The 'dict2python' dictionary maps between the dictionary/JSON interface and the API
# interface.
# The 'short2python' dictionary maps between the short notation interface and the API
# interface.
#
# The mapping between the two interfaces does not have to be 1:1. Some mapping keys
# may call special conversion methods instead of setting the attribute directly.


# Note for developers:
# To achieve backwards compatibility, consider the following best practices:
#
# - Add new methods, don't change existing ones:
#       When adding new functionality, introduce new methods or interfaces instead of
#       modifying existing ones. This ensures that existing user code will not break.
# - Use default values or optional parameters:
#       When adding new parameters to existing methods, use default values or make
#       them optional to avoid breaking existing user code.
# - Avoid removing methods or interfaces:
#       Once a method or interface is published, avoid removing it in future versions.
#       Instead, consider deprecating it and providing a replacement or alternative
#       implementation.
# - Document changes and deprecations:
#       Clearly document any changes, deprecations, or removals in your API, including
#       the version number or identifier where the change occurred. This helps users
#       understand the impact of updates and plan accordingly.


from datetime import date
import os
import sys
from dataclasses import field

sys.path.insert(
    0, os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), ".."))
)
from api_base import api_for, empty_list, empty_dict
import iob_conf as internal_conf
import iob_wire as internal_wire
import interfaces as internal_interface
import iob_bus as internal_bus
import iob_port as internal_port
import iob_snippet as internal_snippet
import iob_comb as internal_comb
import iob_fsm as internal_fsm
import iob_block as internal_block
import iob_license as internal_license
import iob_portmap as internal_portmap
import iob_python_parameter as internal_python_parameter
import iob_instance as internal_instance
import iob_core as internal_core
from py2hwsw_version import PY2HWSW_VERSION


# NOTE: for developers:
# - Update py2hwsw version every time API changes!
#   Must change major version if new API is not backwards compatible.
#   Change minor version when adding new API methods or other non-breaking changes.

# NOTE: for users:
# - Every attribute must be accessed via setter/getter methods.
#   Users should use corresponding getters/setters [like `get_<attribute_name>()`/`set_<attribute_name>()`].
#   Some of these methods may be automatically generated by the decorator.
# - Classes have similar structure to python's '@dataclasses'
# - Methods are abstract. They do not contain implementation in the API.


#
# Confs
#
@api_for(internal_conf.iob_conf)
class iob_conf:
    """
    Class to represent a configuration option.

    Attributes:
        name (str): Configuration identifier name.
        kind (str): Configuration type, either M (Verilog macro), P (Verilog parameter), C (Constant) or D (Derived Parameter).
                    False-parameters are the same as verilog parameters except that the its value must not be overriden.
        value (str | int | bool): Configuration value.
        min_value (str | int): Minimum value supported by the configuration option (NA if not applicable).
        max_value (str | int): Maximum value supported by the configuration option (NA if not applicable).
        descr (str): Description of the configuration option.
        doc_only (bool): If enabled, configuration option will only appear in documentation. Not in the verilog code.
    """

    name: str = ""
    kind: str = "P"
    value: str | int | bool = ""
    min_value: str | int = "NA"
    max_value: str | int = "NA"
    descr: str = "Default description"
    doc_only: bool = False

    # TODO: Remove this method
    def test_method(self, var1: str, var2: int) -> list:
        """Example docstring"""
        pass


# TODO: Rename 'keys' to match attribute names. No longer need to map them.
@api_for(internal_conf.conf_from_dict)
def create_conf_from_dict(conf_dict):
    """
    Function to create iob_conf object from dictionary attributes.

    Attributes:
        conf_dict (dict): dictionary with values to initialize attributes of iob_conf object.
            This dictionary supports the following keys corresponding to the iob_conf attributes:
            - name           -> iob_conf.name
            - kind           -> iob_conf.kind
            - value          -> iob_conf.value
            - min_value      -> iob_conf.min_value
            - max_value      -> iob_conf.max_value
            - descr          -> iob_conf.descr
            - doc_only       -> iob_conf.doc_only

    Returns:
        iob_conf: iob_conf object
    """
    pass


@api_for(internal_conf.conf_from_text)
def create_conf_from_text(conf_text):
    """
    Function to create iob_conf object from short notation text.

    Attributes:
        conf_text (str): Short notation text. Object attributes are specified using the following format:
            name [-t kind] [-v value] [-m min_value] [-M max_value] [-doc]
            [-d descr]
            Example:
                DATA_W -t P -v 32 -m NA -M NA
                -d 'Data bus width'

    Returns:
        iob_conf: iob_conf object
    """
    pass


@api_for(internal_conf.iob_conf_group)
class iob_conf_group:
    """
    Class to represent a group of configurations.

    Attributes:
        name (str): Configuration group identifier name.
        descr (str): Description of the configuration group.
        confs (list): List of configuration objects.
        doc_only (bool): If enabled, configuration group will only appear in documentation. Not in the verilog code.
        doc_clearpage (bool): If enabled, the documentation table for this group will be terminated by a TeX '\clearpage' command.
    """

    name: str = ""
    descr: str = "Default description"
    confs: list[iob_conf] = empty_list()
    doc_only: bool = False
    doc_clearpage: bool = False


@api_for(internal_conf.conf_group_from_dict)
def create_conf_group_from_dict(conf_group_dict):
    """
    Function to create iob_conf_group object from dictionary attributes.

    Attributes:
        conf_group_dict (dict): dictionary with values to initialize attributes of iob_conf_group object.
            This dictionary supports the following keys corresponding to the iob_conf_group attributes:
            - name          -> iob_conf_group.name
            - descr         -> iob_conf_group.descr
            - confs         -> iob_conf_group.confs
            - doc_only      -> iob_conf_group.doc_only
            - doc_clearpage -> iob_conf_group.doc_clearpage

    Returns:
        iob_conf_group: iob_conf_group object
    """
    pass


@api_for(internal_conf.conf_group_from_text)
def create_conf_group_from_text(conf_group_text):
    """
    Function to create iob_conf_group object from short notation text.

    Attributes:
        conf_group_text (str): Short notation text. Object attributes are specified using the following format:
            name [-d descr] [--confs] [-doc] [-doc_clearpage]
            Example:
                'Default group'
                -d 'Default group of confs'
                -doc
                -doc_clearpage
                --confs
                    "
                    DATA_W -t P -v 32 -m NA -M NA
                    -d 'Data bus width'

                    ADDR_W -t P -v 4 -m NA -M NA
                    -d 'Address width'
                    "

    Returns:
        iob_conf_group: iob_conf_group object
    """
    pass


#
# Signals
#


@api_for(internal_wire.iob_global_wire)
class iob_global_wire:
    """
    Class that represents a global wire. Similar concept to 'net' in HDL terminology: https://vhdlwhiz.com/terminology/net/#net

    Attributes:
        name (str): Identifier name for the global_wire.
        width (str or int): Number of bits in the global_wire.
        descr (str): Description of the global_wire.
        isvar (bool): If enabled, global_wire will be generated with type `reg` in Verilog.
        value (str or int): Logic value for future simulation effort using global wires list.
                            See 'TODO' in iob_core.py for more info: https://github.com/IObundle/py2hwsw/blob/a1e2e2ee12ca6e6ad81cc2f8f0f1c1d585aaee73/py2hwsw/scripts/iob_core.py#L251-L259
    """

    name: str = ""
    width: str or int = 1
    descr: str = "Default description"
    isvar: bool = False
    value: str or int = 0


@api_for(internal_wire.global_wire_from_dict)
def create_global_wire_from_dict(global_wire_dict):
    """
    Function to create iob_global_wire object from dictionary attributes.

    Attributes:
        global_wire_dict (dict): dictionary with values to initialize attributes of iob_global_wire object.
            This dictionary supports the following keys corresponding to the iob_global_wire attributes:
            - name          -> iob_global_wire.name
            - width         -> iob_global_wire.width
            - descr         -> iob_global_wire.descr
            - isvar         -> iob_global_wire.isvar

    Returns:
        iob_global_wire: iob_global_wire object
    """
    pass


@api_for(internal_wire.global_wire_from_text)
def create_global_wire_from_text(global_wire_text):
    """
    Function to create iob_global_wire object from short notation text.

    Attributes:
        global_wire_text (str): Short notation text. Object attributes are specified using the following format:
            name [-w width] [-d descr] [-v (enables isvar)]
            Example:
                en -w 1 -d 'Enable global_wire' -v

    Returns:
        iob_global_wire: iob_global_wire object
    """
    pass


@api_for(internal_wire.iob_wire)
class iob_wire:
    """
    Class that represents a core's internal wire.

    Attributes:
        name (str): Name for the wire inside the core. Verilog wire will be generated with this name.
        global_wire (iob_global_wire): Reference to the global_wire (net) that drives the internal wire.
    """

    name: str = ""
    global_wire: iob_global_wire = None


@api_for(internal_wire.wire_from_dict)
def create_wire_from_dict(wire_dict):
    """
    Function to create iob_wire object from dictionary attributes.

    Attributes:
        wire_dict (dict): dictionary with values to initialize attributes of iob_wire object.
            This dictionary supports the following keys corresponding to the iob_wire attributes:
            - name          -> iob_wire.name
            - global_wire   -> iob_wire.global_wire

    Returns:
        iob_wire: iob_wire object
    """
    pass


@api_for(internal_wire.wire_from_text)
def create_wire_from_text(wire_text):
    """
    Function to create iob_wire object from short notation text.

    Attributes:
        wire_text (str): Short notation text. Object attributes are specified using the following format:
            TODO:

    Returns:
        iob_wire: iob_wire object
    """
    pass


#
# if_gen
#


@api_for(internal_interface.interface)
class interface:
    """
    Class to represent an interface for generation.

    Attributes:
        if_direction (str): Interface direction. Examples: '' (unspecified), 'manager', 'subordinate', ...
        prefix (str): Prefix for wires of the interface.
        mult (str or int): Width multiplier. Used when concatenating multiple instances of the interface.
        file_prefix (str): Prefix for generated "Verilog Snippets" of this interface.
        portmap_port_prefix (str): Prefix for "Verilog snippets" of portmaps of this interface:
    """

    if_direction: str = ""
    prefix: str = ""
    mult: str | int = 1
    file_prefix: str = ""
    portmap_port_prefix: str = ""


@api_for(internal_interface.interface_from_dict)
def create_interface_from_dict(interface_dict):
    """
    Function to create interface object from dictionary attributes.

    Attributes:
        interface_dict (dict): dictionary with values to initialize attributes of interface object.
            This dictionary supports the following keys corresponding to the interface attributes:
            - if_direction        -> interface.if_direction
            - prefix              -> interface.prefix
            - mult                -> interface.mult
            - file_prefix         -> interface.file_prefix
            - portmap_port_prefix -> interface.portmap_port_prefix

    Returns:
        interface: interface object
    """
    pass


@api_for(internal_interface.interface_from_text)
def create_interface_from_text(interface_text):
    """
    Function to create interface object from short notation text.

    Attributes:
        interface_text (str): Short notation text. Object attributes are specified using the following format:
            type [-p prefix] [-m mult] [-w width]

    Returns:
        interface: interface object
    """
    pass


#
# Buses
#
@api_for(internal_bus.iob_bus)
class iob_bus:
    """
    Class to represent a bus in an iob module.

    Attributes:
        name (str): Identifier name for the bus.
        interface (interface): Name of the standard interface to auto-generate with `if_gen.py` script.
        descr (str): Description of the bus.
        wires (list): List of wires belonging to this bus
                        (each wire represents a hardware Verilog bus).
    """

    name: str = ""
    interface: interface = None
    descr: str = "Default description"
    wires: list[iob_wire] = empty_list()

    def get_wire(self, wire_name: str) -> iob_wire:
        """
        Find a wire by name and return it.

        Args:
            wire_name (str): Name of the wire to find

        Returns:
            iob_wire: The found wire.
        """
        pass


@api_for(internal_bus.bus_from_dict)
def create_bus_from_dict(bus_dict):
    """
    Function to create iob_bus object from dictionary attributes.

    Attributes:
        bus_dict (dict): dictionary with values to initialize attributes of iob_bus object.
            This dictionary supports the following keys corresponding to the iob_bus attributes:
            - name           -> iob_bus.name
            - interface      -> iob_bus.interface
            - descr          -> iob_bus.descr
            - wires        -> iob_bus.wires

    Returns:
        iob_bus: iob_bus object
    """
    pass


@api_for(internal_bus.bus_from_text)
def create_bus_from_text(bus_text):
    """
    Function to create iob_bus object from short notation text.

    Attributes:
        bus_text (str): Short notation text. Object attributes are specified using the following format:
            name [-i interface] [-d descr] [-s wire_name1:width1] [-s wire_name2:width2]+
            Examples:
                dbus -d 'data bus' -s wdata:32 -s wstrb:4

    Returns:
        iob_bus: iob_bus object
    """
    pass


#
# Ports
#


@api_for(internal_port.iob_port)
class iob_port:
    """
    Describes an IO port.

    Attributes:
        global_wire (iob_bus): Reference to the core's bus that will become a port/interface.
        direction (str): Port direction
        doc_only (bool): Only add to documentation
        doc_clearpage (bool): If enabled, the documentation table for this port will be terminated by a TeX '\clearpage' command.
    """

    # FIXME: Should the port reference a global wire or a local bus?
    # Since we probably dont want to create a port for every single wire (of an AXI bus for example), then I assume the port should reference a bus.
    # However, we dont have a global bus list (since global wires are not necessarly always grouped together).
    global_wire: iob_bus = None
    direction: str = ""
    doc_only: bool = False
    doc_clearpage: bool = False


@api_for(internal_port.port_from_dict)
def create_port_from_dict(port_dict):
    """
    Function to create iob_port object from dictionary attributes.

    Attributes:
        port_dict (dict): dictionary with values to initialize attributes of iob_port object.
            This dictionary supports the following keys corresponding to the iob_port attributes:
            - global_wire -> iob_port.global_wire
            - doc_only -> iob_port.doc_only
            - doc_clearpage -> iob_port.doc_clearpage
            (Also supports the keys inherited from iob_bus)

    Returns:
        iob_port: iob_port object
    """
    pass


@api_for(internal_port.port_from_text)
def create_port_from_text(port_text):
    """
    Function to create iob_port object from short notation text.

    Attributes:
        port_text (str): Short notation text. Object attributes are specified using the following format:
            name [-i interface] [-d descr] [-s wire_name:width]+

    Returns:
        iob_port: iob_port object
    """
    pass


#
# Snippets
#


@api_for(internal_snippet.iob_snippet)
class iob_snippet:
    """
    Class to represent a Verilog snippet in an iob module.

    Attributes:
        verilog_code (str): Verilog code string
    """

    verilog_code: str = ""


@api_for(internal_snippet.snippet_from_dict)
def create_snippet_from_dict(snippet_dict):
    """
    Function to create iob_snippet object from dictionary attributes.

    Attributes:
        snippet_dict (dict): dictionary with values to initialize attributes of iob_snippet object.
            This dictionary supports the following keys corresponding to the iob_snippet attributes:
            - verilog_code -> iob_snippet.verilog_code

    Returns:
        iob_snippet: iob_snippet object
    """
    pass


@api_for(internal_snippet.snippet_from_text)
def create_snippet_from_text(snippet_text):
    """
    Function to create iob_snippet object from short notation text.

    Attributes:
        snippet_text (str): Short notation text. Object attributes are specified using the following format:
            TODO

    Returns:
        iob_snippet: iob_snippet object
    """
    pass


#
# Comb
#


@api_for(internal_comb.iob_comb)
class iob_comb(iob_snippet):
    """
    Class to represent a Verilog combinatory circuit in an iob module.

    Attributes:
        code (str): Verilog body code of the @always block.
                    This string will be parsed to automatically identify and infer registers.
                    The `iob_reg` Py2HWSW lib module will be automatically instantiated in the core for each wire '<name>' if the following conditions are met:
                    - The bus '<name>' with single wire '<name>' exists in the core;
                    - The wire '<name>_nxt' is used in the iob_comb's code. The bus '<name>_nxt' will be automatically created if it does not exist;

                    The infered register will have the instance name '<name>_reg'. It will automatically connect it's input to the '<name>_nxt' wire, and it's output to the '<name>' wire.

                    If the following wires are found in the iob_comb's code, their buses are automatically created and the corresponding register will be updated:
                    - The '<name>_rst' wire will cause the register to have a reset port, and be connected to this bus;
                    - The '<name>_en' wire will cause the register to have an enable port, and be connected to this bus;

                    For example, if we define the 'reg_wire' bus in the core, and the iob_comb has the following code:
                    '''
                    reg_wire_nxt = reg_wire + 1;
                    '''
                    then the 'reg_wire_nxt' bus will be automatically created, and the 'reg_wire_reg' register will be instantiated.
        clk_if (str): Clock interface
    """

    code: str = ""
    clk_if: str = "c_a"
    clk_prefix: str = ""


@api_for(internal_comb.comb_from_dict)
def create_comb_from_dict(comb_dict):
    """
    Function to create iob_comb object from dictionary attributes.

    Attributes:
        comb_dict (dict): dictionary with values to initialize attributes of iob_comb object.
            This dictionary supports the following keys corresponding to the iob_comb attributes:
            - code -> iob_comb.code
            - clk_if -> iob_comb.clk_if

    Returns:
        iob_comb: iob_comb object
    """
    pass


@api_for(internal_comb.comb_from_text)
def create_comb_from_text(comb_text):
    """
    Function to create iob_comb object from short notation text.

    Attributes:
        comb_text (str): Short notation text. Object attributes are specified using the following format:
            TODO

    Returns:
        iob_comb: iob_comb object
    """
    pass


#
# FSM
#


@api_for(internal_fsm.iob_fsm)
class iob_fsm(iob_comb):
    """
    Class to represent a Verilog finite state machine in an iob module.

    Attributes:
        kind (str): Type of the finite state machine.
        default_assignments (str): Verilog code string to be assigned to the state register on reset.
        state_descriptions (str): Verilog code string to be used for state description
    """

    kind: str = "prog"
    default_assignments: str = ""
    state_descriptions: str = ""


@api_for(internal_fsm.fsm_from_dict)
def create_fsm_from_dict(fsm_dict):
    """
    Function to create iob_fsm object from dictionary attributes.

    Attributes:
        fsm_dict (dict): dictionary with values to initialize attributes of iob_fsm object.
            This dictionary supports the following keys corresponding to the iob_fsm attributes:
            - type -> iob_fsm.kind
            - default_assignments -> iob_fsm.default_assignments
            - state_descriptions -> iob_fsm.state_descriptions

    Returns:
        iob_fsm: iob_fsm object
    """
    pass


@api_for(internal_fsm.fsm_from_text)
def create_fsm_from_text(fsm_text):
    """
    Function to create iob_fsm object from short notation text.

    Attributes:
        fsm_text (str): Short notation text. Object attributes are specified using the following format:
            TODO

    Returns:
        iob_fsm: iob_fsm object
    """
    pass


#
# License
#


@api_for(internal_license.iob_license)
class iob_license:
    """
    Class that represents a license attribute.

    Attributes:
        name (str): Name of the license.
        year (int): Year of the license.
        author (str): Author of the license.
    """

    name: str = "MIT"
    year: int = date.today().year
    author: str = "IObundle, Lda"


@api_for(internal_license.license_from_dict)
def create_license_from_dict(license_dict):
    """
    Function to create iob_license object from dictionary attributes.

    Attributes:
        license_dict (dict): dictionary with values to initialize attributes of iob_license object.
            This dictionary supports the following keys corresponding to the iob_license attributes:
            - name -> iob_license.name
            - year -> iob_license.year
            - author -> iob_license.author

    Returns:
        iob_license: iob_license object
    """
    pass


@api_for(internal_license.license_from_text)
def create_license_from_text(license_text):
    """
    Function to create iob_license object from short notation text.

    Attributes:
        license_text (str): Short notation text. Object attributes are specified using the following format:
            TODO

    Returns:
        iob_license: iob_license object
    """
    pass


#
# Port map
#


@api_for(internal_portmap.iob_portmap)
class iob_portmap:
    """
    Class that represents a portmap attribute.

    Attributes:
        e_connect (iob_bus): Identifier name of external bus that connects this port
        e_connect_bit_slices (list): List of bit slices for external connections.
        port (str): IDentifier name of port associated with portmap
    """

    e_connect: iob_bus | None = None
    e_connect_bit_slices: list[str] = empty_list()
    port: str = None


@api_for(internal_portmap.portmap_from_dict)
def create_portmap_from_dict(portmap_dict):
    """
    Function to create iob_portmap object from dictionary attributes.

    Attributes:
        portmap_dict (dict): dictionary with values to initialize attributes of iob_portmap object.
            Dictionary format:
            {
                "port1_name": "external_connection1_name",
                "port2_name": "external_connection2_name",
                "port3_name": ("external_connection3_name", ["bit_slice_1", "bit_slice_2", ...]),
            }
            Dictionary element to attribute mapping:
            port1_name -> iob_portmap.port
            external_connection1_name -> iob_portmap.e_connect
            ["bit_slice_1", "bit_slice_2", ...] -> iob_portmap.e_connect_bit_slices

            Bit slices may perform multiple functions:
            - Slice bits from a wire that is being connected.
              For example, if we have a wire (iob_addr_wire) with 32 bits, from a bus (iob_bus_bus), and we want to connect it to a port (iob_bus_port) that only accepts an address of 8 bits, we could use:
              "iob_bus_port": ("iob_bus_bus", ["iob_addr_wire[7:0]"]),
            - Connect extra wires that do not exist in the bus.
              For example, if we have a wire (independent_iob_data_wire) that is not included in the bus (iob_bus_bus), but exists in the port (iob_bus_port), we could use:
              "iob_bus_port": ("iob_bus_bus", ["iob_data_wire_i: independent_iob_data_wire"]),
              If we didn't have the independent_iob_data_wire, we could instead connect that port's wire to a constant value or high impedance, like so:
              "iob_bus_port": ("iob_bus_bus", ["iob_data_wire_i: 'b1"]),
              "iob_bus_port": ("iob_bus_bus", ["iob_data_wire_i: 'bz"]),

              # FIXME: For some reason, connecting extra wires with bit slices only works for connections between ports and buses that have standard interfaces! Not sure why its implemented this way: https://github.com/IObundle/py2hwsw/blob/0679fc64576380c19be96567efb5093667eeb9fd/py2hwsw/scripts/block_gen.py#L121
              # Also, I'm not sure we can connect them to constants/high impedance.
              # It seems to be possible to connect ports to constants like so: https://github.com/IObundle/py2hwsw/pull/236



    Returns:
        list[iob_portmap]: List of iob_portmap objects
    """
    pass


@api_for(internal_portmap.portmap_from_text)
def create_portmap_from_text(portmap_text):
    """
    Function to create iob_portmap object from short notation text.

    Attributes:
        portmap_text (str): Short notation text. Object attributes are specified using the following format:
            TODO

    Returns:
        iob_portmap: iob_portmap object
    """
    pass


#
# Python Parameter
#


@api_for(internal_python_parameter.iob_python_parameter)
class iob_python_parameter:
    """
    Class that represents a python parameter attribute.

    Attributes:
        name (str): Identifier name for the Python Parameter option.
        val (Any): Value of the Python Parameter option.
        descr (str): Description of the Python Parameter option.
    """

    name: str = ""
    val: object = ""
    descr: str = "Default description"


@api_for(internal_python_parameter.python_parameter_from_dict)
def create_python_parameter_from_dict(python_parameter_dict):
    """
    Function to create iob_python_parameter object from dictionary attributes.

    Attributes:
        python_parameter_dict (dict): dictionary with values to initialize attributes of iob_python_parameter object.
            This dictionary supports the following keys corresponding to the iob_python_parameter attributes:
            - name -> iob_python_parameter.name
            - val -> iob_python_parameter.val
            - descr -> iob_python_parameter.descr

    Returns:
        iob_python_parameter: iob_python_parameter object
    """
    pass


@api_for(internal_python_parameter.python_parameter_from_text)
def create_python_parameter_from_text(python_parameter_text):
    """
    Function to create iob_python_parameter object from short notation text.

    Attributes:
        python_parameter_text (str): Short notation text. Object attributes are specified using the following format:
            TODO

    Returns:
        iob_python_parameter: iob_python_parameter object
    """
    pass


@api_for(internal_python_parameter.iob_python_parameter_group)
class iob_python_parameter_group:
    """
    Class that represents a group of Python Parameters.

    Attributes:
        name (str): Identifier name for the group of Python Parameters.
        descr (str): Description of the Python Parameter group.
        python_parameters (list): List of Python Parameter objects.
        doc_clearpage (bool): If enabled, the documentation table for this group will be terminated by a TeX '\clearpage' command.
    """

    name: str = ""
    descr: str = "Default description"
    python_parameters: list = empty_list()
    doc_clearpage: bool = False


@api_for(internal_python_parameter.python_parameter_group_from_dict)
def create_python_parameter_group_from_dict(python_parameter_group_dict):
    """
    Function to create iob_python_parameter_group object from dictionary attributes.

    Attributes:
        python_parameter_group_dict (dict): dictionary with values to initialize attributes of iob_python_parameter_group object.
            This dictionary supports the following keys corresponding to the iob_python_parameter_group attributes:
            - name -> iob_python_parameter_group.name
            - descr -> iob_python_parameter_group.descr
            - python_parameters -> iob_python_parameter_group.python_parameters
            - doc_clearpage -> iob_python_parameter_group.doc_clearpage

    Returns:
        iob_python_parameter_group: iob_python_parameter_group object
    """
    pass


@api_for(internal_python_parameter.python_parameter_group_from_text)
def create_python_parameter_group_from_text(python_parameter_group_text):
    """
    Function to create iob_python_parameter_group object from short notation text.

    Attributes:
        python_parameter_group_text (str): Short notation text. Object attributes are specified using the following format:
            TODO

    Returns:
        iob_python_parameter_group: iob_python_parameter_group object
    """
    pass


#
# Instance
#


class iob_core:
    """Forward reference of iob_core class. Full declaration of iob_core class is available in below."""

    pass


@api_for(internal_instance.iob_instance)
class iob_instance:
    """
    Generic class to describe a module's instance.

    Attributes:
        core (str): Name of the core to instantiate.
        instance_name (str): Name of the instance. (Will be used as the instance's name in the Verilog module).
        instance_description (str): Description of the instance.
        portmap_connections (list): Instance portmap connections.
        parameters (dict): Verilog parameter values for this instance.
        instantiate (bool): Select if should intantiate the module inside another Verilog module.
    """

    # TODO: Make a new iob_instance class, independent from the iob_core class. Subblocks will instantiate iob_instance objects. Each iob_instance will store a reference to an iob_core.
    core: iob_core = None
    name: str = None
    description: str = "Default instance description"
    portmap_connections: list[str] = empty_list()
    parameters: dict[str, int | str] = empty_dict()
    instantiate: bool = True


@api_for(internal_instance.instance_from_dict)
def create_instance_from_dict(instance_dict):
    """
    Function to create iob_instance object from dictionary attributes.

    Attributes:
        instance_dict (dict): dictionary with values to initialize attributes of iob_instance object.
            This dictionary supports the following keys corresponding to the iob_instance attributes:
            - core -> iob_instance.core
            - name -> iob_instance.name
            - description -> iob_instance.description
            - portmap_connections -> iob_instance.portmap_connections = create_portmap_from_dict(portmap_connections)
            - parameters -> iob_instance.parameters
            - instantiate -> iob_instance.instantiate
            # Non-attribute instance keys
            - core (str): Optional. The name of the core to instantiate. Will search for <core>.py or <core>.json files.
                          If this key is set, all other keys will be ignored! (Except 'python_parameters' key).
                          If <core>.py is found, it must contain a class called <core> that extends iob_core. This class will be used to instantiate the core.
                          If <core>.json is found, its contents will be read and parsed by the create_core_from_dict(<json_contents>) function.
            - python_parameters (dict): Optional. Dictionary of python parameters to pass to the instantiated core.
                                        This key should be used in conjunction with the 'core' key.
                                        Elements from this dictionary will be passed as **kwargs to the instantiated core's constructor.
                                        Only applicable if instantiated core has a constructor that accepts python parameters (excludes cores defined in JSON or purely by dictionary).


    Returns:
        iob_instance: iob_instance object
    """
    pass


@api_for(internal_instance.iob_instance)
def create_instance_from_text(instance_text):
    """
    Function to create iob_instance object from short notation text.

    Attributes:
        instance_text (str): Short notation text. Object attributes are specified using the following format:
            name [-p parameter_name:parameter_value]+ [-c port_name:wire_name]+ [--no_instance]


    Returns:
        iob_instance: iob_instance object
    """
    pass


#
# Core
#


@api_for(internal_core.iob_core)
class iob_core:
    """
    Generic class to describe how to generate a base IOb IP core.

    Attributes:
        # Module attributes
        original_name (str): Original name of the module. Usually auto-filled by Py2HWSW.
                             Must match name of the core's .py file and its class (if any);
                             Must match name of the core's .json file (if any).
                             Only manually needed if core is built directly from iob_core (like `my_core = iob_core(<core_attributes>)`).
        name (str): Name of the generated module. Usually the same as 'original_name' attribute.
                    The core's generated verilog module, sources, and files will have this name.
                    If the core has files in its setup directory, containing strings matching the 'original_name', they will all be renamed to this 'name' when copied to the build directory.
        description (str): Description of the module.
        reset_polarity (str): Global reset polarity of the module. Can be 'positive' or 'negative'. (Will override all subblocks' reset polarities).
        confs (list): List of module macros and Verilog (false-)parameters
        ports (list): List of module ports
        buses (list): List of buses
        snippets (list): List of Verilog code snippets
        comb (iob_comb): Combinational circuit
        fsm (iob_fsm): Finite state machine
        subblocks (list): List of instances of other cores inside this core.
        superblocks (list): List of wrappers for this core. Will only be setup if this core is a top module, or a wrapper of the top module.
        sw_modules (list): List of software modules required by this core.

        # Core attributes
        version (str): Core version. By default is the same as Py2HWSW version.
        previous_version (str): Core previous version.
        setup_dir (str): Path to root folder (setup directory) of the core. Usually auto-filled by Py2HWSW.
                         By default this directory matches the directory of the core's .py/.json file.
        build_dir (str): Path to folder of build directory to be generated for this project.
        use_netlist (bool): Copy `<SETUP_DIR>/CORE.v` netlist instead of `<SETUP_DIR>/hardware/src/*`
        is_system (bool): Sets `IS_FPGA=1` in config_build.mk
        board_list (list): List of FPGAs supported by this core. A standard folder will be created for each board in this list.
        ignore_snippets (list): List of `.vs` file includes in verilog to ignore.
        generate_hw (bool): Select if should try to generate `<corename>.v` from py2hwsw dictionary. Otherwise, only generate `.vs` files.
        parent (dict): Select parent of this core (if any). If parent is set, that core will be used as a base for the current one. Any attributes of the current core will override/add to those of the parent.
        is_tester (bool): Generates makefiles and depedencies to run this core as if it was the top module. Used for testers (superblocks of top moudle).
        supported_python_parameters (list): List of core Python Parameters. Used for documentation.
        license (iob_license): License for the core.
        doc_conf (str): CSR Configuration to use.
        title (str): Title of this core. Used for documentation.
        dest_dir (str): Relative path to the destination inside build directory to copy sources of this core (from this core's hardware/src/ folder).
                        Only applicable to subblocks/superblocks. Never the top module.
                        For example, if this core contains dest_dir="hardware/simulation/src", this core's sources (from the hardware/src/ folder) will be copied to <build_dir>/hardware/simulation/src, during the build directory generation process.
                        Note: Even though this is a core attribute (each instantiated core only has one copy of it), it is usually specified by the instantiator/issuer of this core.

    """

    # Module attributes
    # FIXME: Remove original_name attribute. Create internal `get_original_name()` method that obtains class name dynamically.
    # The lack of this attribute may cause some issues for .json cores, or cores created with iob_core(core_dict).
    # But we can probably work around this by creating dynamic subclasses of iob_core with the correct name.
    original_name: str = None
    name: str = ""
    description: str = "Default description"
    reset_polarity: str = "positive"
    confs: list[iob_conf_group] = empty_list()
    ports: list[iob_port] = empty_list()
    buses: list[iob_bus] = empty_list()
    snippets: list[iob_snippet] = empty_list()
    comb: iob_comb | None = None
    fsm: iob_fsm | None = None
    subblocks: list[iob_instance] = empty_list()
    superblocks: list[iob_core] = empty_list()
    sw_modules: list[iob_core] = empty_list()

    # Core attributes
    version: str = PY2HWSW_VERSION
    previous_version: str = PY2HWSW_VERSION
    setup_dir: str = None
    build_dir: str = "build"
    use_netlist: bool = False
    is_system: bool = False
    board_list: list[str] = empty_list()
    ignore_snippets: list[str] = empty_list()
    generate_hw: bool = False
    parent: dict = empty_dict()  # FIXME: not sure if this will be needed in pythase?
    is_tester: bool = False
    # FIXME: Should this be an instance attribute? Should it store received values as well?
    python_parameters: list[iob_python_parameter_group] = empty_list()
    license: iob_license = field(default_factory=iob_license)
    doc_conf: str = ""
    title: str = ""
    dest_dir: str = "hardware/src"

    def __init__(self, core_dictionary: dict = {}):
        """
        Constructor for cores.

        Attributes:
            core_dictionary (dict): Optional dictionary to initialize core attributes.
        """
        pass

    def generate_build_dir(self):
        """
        Standard method to generate build directory.
        May be overridden by user subclasses to generate custom files or run scripts during the build directory generation process.
        """
        pass


@api_for(internal_core.core_from_dict)
def create_core_from_dict(core_dict):
    """
    Function to create iob_core object from dictionary attributes.

    Attributes:
        core_dict (dict): dictionary with values to initialize attributes of iob_core object.
            This dictionary supports the following keys corresponding to the iob_core attributes:

            # Module keys
            - original_name -> iob_module.original_name
            - name -> iob_module.name
            - description -> iob_module.description
            - reset_polarity -> iob_module.reset_polarity
            - confs -> iob_module.confs
            - ports -> iob_module.ports
            - buses -> iob_module.buses
            - snippets -> iob_module.snippets
            - comb -> iob_module.comb
            - fsm -> iob_module.fsm
            - subblocks -> iob_module.subblocks = [create_core_from_dict(i) for i in subblocks]
            - superblocks -> iob_module.superblocks = [create_core_from_dict(i) for i in superblocks]
            - sw_modules -> iob_module.sw_modules = [create_core_from_dict(i) for i in sw_modules]

            # Core keys
            - version -> iob_core.version
            - previous_version -> iob_core.previous_version
            - setup_dir -> iob_core.setup_dir
            - build_dir -> iob_core.build_dir
            - use_netlist -> iob_core.use_netlist
            - is_system -> iob_core.is_system
            - board_list -> iob_core.board_list
            - ignore_snippets -> iob_core.ignore_snippets
            - generate_hw -> iob_core.generate_hw
            - parent -> iob_core.parent
            - is_tester -> iob_core.is_tester
            - python_parameters -> iob_core.python_parameters  # FIXME: Cant have two keys with the same name
            - license -> iob_core.license
            - doc_conf -> iob_core.doc_conf
            - title -> iob_core.title
            - dest_dir -> iob_core.dest_dir

    Returns:
        iob_core: iob_core object
    """
    pass


@api_for(internal_core.core_from_text)
def create_core_from_text(core_text):
    """
    Function to create iob_core object from short notation text.

    Attributes:
        core_text (str): Short notation text. Object attributes are specified using the following format:
            # Notation specific to modules
            original_name

            # Notation specific to cores
            # TODO

            # Below are parameters specific to the 'iob_csrs' module. They should probably not belong in the Py2HWSW API.
            [--no_autoaddr]
            [--rw_overlap]
            [--csr_if csr_if]
                [--csr-group csr_group_name]
                    [-r reg_name:n_bits]
                        [-t type] [-m mode] [--rst_val rst_val] [--addr addr] [--log2n_items log2n_items]

    Returns:
        iob_core: iob_core object
    """
    pass


@api_for(internal_core.get_global_wires_list)
def get_global_wires_list():
    """
    Function to get a reference to the global wires list (netlist) of the project.

    Returns:
        list[iob_global_wire]: Global wires list
    """
    pass
